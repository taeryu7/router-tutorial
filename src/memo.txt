react-router 를 통한 리액트 싱글 페이지 애플리케이션 만들기

SPA 란?
Single Page Application (싱글 페이지 어플리케이션) 의 약자로 페이지가 1개인 어플리케이션이라는 뜻이다.
전통적인 웹페이지의 구조는 여러페이지로 구성되어있다. 
유저가 요철할 때 마다 페이지가 새로고침되며, 페이지를 로딩 할 때마다 서버로부터 리소스를 전달받아 해석후 렌더링을 한다.
HTML 파일, 혹은 템플릿 엔진 등을 사용해서 어플리케이션의 뷰가 어떻게 보여질지도 서버에서 담당했다.

요즘은 웹에서 제공되는 정보가 정말 많기 때문에 속도적인 측면에서 문제가 있었고, 이를 해소하기 위하여 캐싱과 압축을 하여 서비스가 제공된다.
이는 사용자와 인터랙션이 많은 모던 웹 어플리케이션에서는 충분하지 않을 수도 있다.
렌더링 하는걸 서버쪽에서 담당한다는것은 그만큼 렌더링을 위한 서버 자원이 사용되는것이고, 불필요한 트래픽이 낭비된다.

리액트같은 라이브러리 혹은 프레임워크를 사용해서 뷰 렌더링을 유저의 브라우저가 담당하도록하고, 
어플리케이션을 브라우저에 로드한 다음 필요한 데이터만 전달받아 보여준다.

싱글페이지라고해서 한종류의 화면만 있는게 아니다.
블로그를 만든다면, 홈, 포스트 목록, 포스트, 글쓰기 등의 화면이있고, 화면에 따라 주소도 만들어줘야한다. 
주소가 있어야, 유저들이 북마크도 할 수 있고 서비스에 구글을 통해 유입될 수 있기 때문이다.

다른 주소에 따라 다른 뷰를 보여주는것을 라우팅 이라고 하는데, 리액트자체에 이 기능이 내장되어있지 않다.
따라서 직접 브라우저의 API를 사용하고 상태를 설정해주어야 다른 뷰가 보여진다.

react-router 는, 써드파티 라이브러리로서, 비록 공식은 아니지만 (페이스북 공식 라우팅 라이브러리는 존재하지 않는다) 가장 많이 사용되고 있는 라이브러리다.
이 라이브러리는 클라이언트 사이드에서 이뤄지는 라우팅을 간단하게 해준다.
서버 사이드 렌더링도 도와주는 도구들이 함께 딸려온다. 추가로 이 라우터는 react-native 에서도 사용 될 수 있다.

SPA 의 단점
SPA 의 단점은, 앱의 규모가 커지면 자바스크립트 파일 사이즈가 너무 커진다는 것 이다.
유저가 실제로 방문하지 않을수도 있는 페이지에 관련된 렌더링 관련 스크립트도 불러오기 때문이다.
Code Splitting 을 사용한다면 라우트 별로 파일들을 나눠서 트래픽과 로딩속도를 개선 할 수 있다.
Code Splitting → https://velog.io/@velopert/react-code-splitting

리액트 라우터같이 브라우저측에서 자바스크립트를 사용하여 라우트를 관리하는것의 잠재적인 단점은, 
자바스크립트를 실행하지 않는 일반 크롤러에선 페이지의 정보를 제대로 받아가지 못한다는 점이다.
구글, 네이버, 다음 등 검색엔진에서 페이지가 검색결과에서 잘 안타날수도 있다.

자바스크립트가 실행될때까지 페이지가 비어있기 때문에,
자바스크립트 파일이 아직 캐싱되지 않은 사용자는 아주 짧은 시간동안 흰 페이지가 나타날 수도 있다는 단점도 있다.
↑이는, 서버사이드 렌더링을 통하여 해결 할 수 있다.


파라미터와 쿼리
페이지 주소를 정의 할 때 유동적인 값을 전달 해야 할때도 있는데, 이는 파라미터와 쿼리로 나뉘어질 수 있다.
이것을 사용하는것에 대하여 무조건 따라야 하는 규칙은 없지만, 일반적으로는 파라미터는 특정 id 나 이름을 가지고 조회를 할 때 사용하고, 
쿼리의 경우엔 어떤 키워드를 검색하거나, 요청을 할 때 필요한 옵션을 전달 할 때 사용된다.

Query
쿼리는 라우트 컴포넌트에게 props 전달되는 location 객체에 있는 search 값에서 읽어올 수 있다.
location 객체는 현재 앱이 갖고있는 주소에 대한 정보를 지니고있다.
{
  key: 'ac3df4', // not with HashHistory!
  pathname: '/somewhere'
  search: '?some=search-string',
  hash: '#howdy',
  state: {
    [userDefined]: true
  }
}

여기서 search 값을 확인해야하는데, 이 값은 문자열 형태로 되어있다.
객체 형태로 변환하는건 우리가 직접 해주어야한다.
이 작업은 qs 라는 라이브러리를 사용하여 쉽게 할 수 있다.
QS 링크 → https://www.npmjs.com/package/qs
